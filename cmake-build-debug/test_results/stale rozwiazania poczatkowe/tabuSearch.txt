void TownsTSP::tabuSearch(int tt)
{
    /*Local search*/

    /*random initial solution*/
    int* solutionC = new int [map_dim];
    for (int k = 0; k < map_dim ; ++k)
        solutionC[k] = k;
    //memcpy(solutionC,solution, map_dim*sizeof(int));

    /*array containing positions of the cities in the solutionC*/
    int* positionsC = new int [map_dim];
    for (int i = 0; i < map_dim; ++i)
        positionsC[solutionC[i]] = i;

    /*global best solution cost*/
    double globalLowest = routeCost(solution);
    double solutionC_cost = routeCost(solutionC);
    int iterations = 0;
    bool stopCriteria = false;

    /*tabu matrix*/
    int tabuTenure = tt;
    TabuMatrix tabu = *new TabuMatrix(map_dim, tabuTenure);

    while(!stopCriteria) {
        /*find best neighbour of solutionC*/
        double neighbourhoodLowest = DBL_MAX;
        int bestLeft = -1, bestRight=-1;
        for (int i = 0; i < map_dim - 1; ++i) {
            for (int j = i + 1; j < map_dim; ++j) {

                swapTowns(solutionC, i, j);
                /*calculating the cost of neighbour solution*/
                double tempCost = routeCost(solutionC);
                /*changing two cities always causes two edges to switch
                 */

                /*if the move leads to the currently best solution in neighburhood then save it as currently best*/
                bool isTabu = tabu.isTabu(solutionC[i], solutionC[j]) || tabu.isTabu(solutionC[j], solutionC[i]) ;
                if (tempCost < neighbourhoodLowest && !isTabu) {
                    neighbourhoodLowest = tempCost;
                    bestLeft = i;
                    bestRight = j;
                }

                /*come back to initial solution*/
                swapTowns(solutionC, i, j);
            }
        }

        /*now we make the move without checking if it's better then solutionC*/
        /*add the move to tabu*/
        tabu.addMove(solutionC[bestLeft], solutionC[bestRight]);
        /*update the positions list*/
        positionsC[solutionC[bestLeft]] = bestRight;
        positionsC[solutionC[bestRight]] = bestLeft;
        swapTowns(solutionC, bestLeft, bestRight);
        solutionC_cost = neighbourhoodLowest;


        /*if solutionC is now better then global best solution, then update the global best*/
        if (solutionC_cost < globalLowest) {
            delete[] solution;
            solution = new int[map_dim];
            memcpy(solution, solutionC, map_dim * sizeof(int));
            globalLowest = solutionC_cost;
        }
        else
            iterations++;

        if(iterations == 50)
            stopCriteria = true;
        tabu.decrementTenure();
    }
    std::cout<<"iteracje: " <<iterations <<std::endl;
}
